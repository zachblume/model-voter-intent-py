{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2901,"status":"ok","timestamp":1655780095718,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"},"user_tz":240},"id":"gZ6KPTCow8sG","outputId":"ae8f8d9e-c92c-42b9-a3a9-72216fa57d6e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: lazypredict in /usr/local/lib/python3.7/dist-packages (0.2.9)\n","Requirement already satisfied: numpy==1.19.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.19.1)\n","Requirement already satisfied: lightgbm==2.3.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (2.3.1)\n","Requirement already satisfied: click==7.1.2 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (7.1.2)\n","Requirement already satisfied: PyYAML==5.3.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (5.3.1)\n","Requirement already satisfied: tqdm==4.56.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (4.56.0)\n","Requirement already satisfied: pytest==5.4.3 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (5.4.3)\n","Requirement already satisfied: scipy==1.5.4 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.5.4)\n","Requirement already satisfied: xgboost==1.1.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.1.1)\n","Requirement already satisfied: scikit-learn==0.23.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (0.23.1)\n","Requirement already satisfied: six==1.15.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.15.0)\n","Requirement already satisfied: pandas==1.0.5 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.0.5)\n","Requirement already satisfied: joblib==1.0.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.0.0)\n","Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.7/dist-packages (from pandas==1.0.5->lazypredict) (2.8.2)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas==1.0.5->lazypredict) (2022.1)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (21.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (21.3)\n","Requirement already satisfied: py>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (1.11.0)\n","Requirement already satisfied: pluggy<1.0,>=0.12 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (0.13.1)\n","Requirement already satisfied: importlib-metadata>=0.12 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (4.11.4)\n","Requirement already satisfied: more-itertools>=4.0.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (8.13.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3->lazypredict) (0.2.5)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.1->lazypredict) (3.1.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.12->pytest==5.4.3->lazypredict) (3.8.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.12->pytest==5.4.3->lazypredict) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->pytest==5.4.3->lazypredict) (3.0.9)\n"]}],"source":["!pip install lazypredict"]},{"cell_type":"markdown","metadata":{"id":"8E1IjRsysC7G"},"source":["# Import csvs through google\n","By using google drive, we avoid runtime termination changing available data.\n"]},{"cell_type":"markdown","source":["First we'll make a loader/cleaner function:"],"metadata":{"id":"VPq5LPoM6Ndr"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","def clean_input_csv (url):\n","    df = pd.read_csv(url,na_values='.') # The na_values setting replaces NaN/null values with a floating-point and string compatible dot\n","    #df = df.sample(frac=1, random_state=1).reset_index() #okay actuall test train split already shuffles so this line is redundant\n","\n","    # Change non-numerical columns to 'category' a statistical-category datatype understood by scikit,etc\n","    cols = df.select_dtypes(include='object').columns\n","    #df[cols].fillna('MissingValues')\n","    df[cols] = df[cols].astype('category')\n","\n","    # Remove columns that are due to contact with voters because that's a bias to prediction\n","    disallow=['mAddress','Address','PreferredEmail']\n","    df = df.drop(disallow, axis=1)\n","\n","    # Drop columns where y is null from test/train set\n","    df_after_dropping = df.dropna(axis='index',subset=['Support_YL_Congress'])\n","    needs_predictions = df[~df.index.isin(df_after_dropping.index)]\n","    df = df_after_dropping\n","\n","    #Cleanup NaN/null in numeric columns\n","    # select numeric columns\n","    numeric_columns = df.select_dtypes(exclude=['category']).columns\n","\n","    # fill 0 to all NaN \n","    df[numeric_columns] = df[numeric_columns].fillna('0').apply(pd.to_numeric)\n","\n","    # Split out the target column\n","    y = df['Support_YL_Congress'].str.replace('[^0-9]','').apply(pd.to_numeric).replace(2,1).replace(3,0).replace(4,0).replace(5,0).astype('int64')\n","    X = df.drop('Support_YL_Congress',axis=1)\n","    #X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)\n","    return X, y"],"metadata":{"id":"t5TaXkA_6JiZ","executionInfo":{"status":"ok","timestamp":1655780103036,"user_tz":240,"elapsed":97,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#csvs\n","#url_all_ids_may10 = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTMcVu8cf1ZEFK6yuHn3xgJrT5L5jTQa7GY9zuRaIvgyrYBpWL08iyAcvbWT9kyulrs1PT3u1HyrRGz/pub?gid=1976628524&single=true&output=csv'\n","#url_all_phones_may3 = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTd1WpzujmHh-qYe19ddQPSWFnrdmHM6g0XvblVcAVAVhwgM91qQKM4Hyvvi58fSnoGpjcWcXG3FSr6/pub?gid=616038225&single=true&output=csv'\n","url_yl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTWftkJrX5XkGlW_VJxsv5KiJfaTsNXZgZm6iNAqb9MVMSfeMxBmWs6uD1BTtu91HLxjgc7xm13YClE/pub?gid=1333138318&single=true&output=csv'\n","\n","# Import all phones may 3\n","X, y = clean_input_csv(url_yl)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)"],"metadata":{"id":"mkJsdZws6McC","executionInfo":{"status":"ok","timestamp":1655780106151,"user_tz":240,"elapsed":1180,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#oversmapling\n","\n","from collections import Counter\n","from sklearn.datasets import make_classification\n","from imblearn.over_sampling import RandomOverSampler \n","\n","print('Original dataset shape %s' % Counter(y_train))\n","\n","rus = RandomOverSampler(random_state=42)\n","#X_train, y_train = rus.fit_resample(X_train, y_train)\n","\n","print('Resampled dataset shape %s' % Counter(y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MBy7ze9wjcYB","executionInfo":{"status":"ok","timestamp":1655779922037,"user_tz":240,"elapsed":329,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"d4cbf214-6f7a-4ee5-9964-ad2530bcfeda"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Original dataset shape Counter({0: 277, 1: 71})\n","Resampled dataset shape Counter({0: 277, 1: 71})\n"]}]},{"cell_type":"markdown","source":["Create a resampled dataset as well."],"metadata":{"id":"B6RBcJ0K5h43"}},{"cell_type":"code","source":["from collections import Counter\n","from sklearn.datasets import make_classification\n","from imblearn.under_sampling import RandomUnderSampler \n","\n","rus = RandomUnderSampler(random_state=42)\n","X_resampled, y_resampled = rus.fit_resample(X, y)\n","X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=45)\n","#print('Original dataset shape %s' % Counter(y))\n","#print('Resampled dataset shape %s' % Counter(y_resampled))"],"metadata":{"id":"j9pOTYR28ky_","executionInfo":{"status":"ok","timestamp":1655780117384,"user_tz":240,"elapsed":347,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iBpPxQa8wf4h"},"source":["# Generate lazy predict, SVC and XgBOOST models and then hyperparamter tuning"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":2571,"status":"ok","timestamp":1655780122575,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"},"user_tz":240},"id":"ArhwPyOH9GOc","outputId":"4d0d30d0-51ec-4990-e0fa-ac5d9f36f440"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:143: FutureWarning: The sklearn.utils.testing module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.utils. Anything that cannot be imported from sklearn.utils is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n","100%|██████████| 29/29 [00:01<00:00, 14.98it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["                               Accuracy  Balanced Accuracy  ROC AUC  F1 Score  \\\n","Model                                                                           \n","PassiveAggressiveClassifier        0.64               0.64     0.64      0.64   \n","ExtraTreeClassifier                0.61               0.62     0.62      0.61   \n","SVC                                0.60               0.60     0.60      0.60   \n","DecisionTreeClassifier             0.59               0.59     0.59      0.59   \n","ExtraTreesClassifier               0.57               0.58     0.58      0.58   \n","NuSVC                              0.57               0.58     0.58      0.58   \n","BernoulliNB                        0.57               0.57     0.57      0.57   \n","DummyClassifier                    0.56               0.56     0.56      0.56   \n","KNeighborsClassifier               0.56               0.56     0.56      0.56   \n","RandomForestClassifier             0.55               0.55     0.55      0.55   \n","LGBMClassifier                     0.55               0.55     0.55      0.55   \n","QuadraticDiscriminantAnalysis      0.54               0.55     0.55      0.51   \n","LabelSpreading                     0.54               0.55     0.55      0.53   \n","LabelPropagation                   0.54               0.55     0.55      0.53   \n","GaussianNB                         0.53               0.53     0.53      0.52   \n","BaggingClassifier                  0.53               0.53     0.53      0.52   \n","CalibratedClassifierCV             0.53               0.53     0.53      0.53   \n","NearestCentroid                    0.53               0.52     0.52      0.53   \n","XGBClassifier                      0.51               0.51     0.51      0.51   \n","SGDClassifier                      0.51               0.51     0.51      0.51   \n","AdaBoostClassifier                 0.51               0.51     0.51      0.51   \n","LinearDiscriminantAnalysis         0.51               0.51     0.51      0.51   \n","LinearSVC                          0.51               0.51     0.51      0.51   \n","RidgeClassifierCV                  0.51               0.51     0.51      0.51   \n","RidgeClassifier                    0.49               0.49     0.49      0.49   \n","LogisticRegression                 0.49               0.49     0.49      0.49   \n","Perceptron                         0.44               0.43     0.43      0.43   \n","\n","                               Time Taken  \n","Model                                      \n","PassiveAggressiveClassifier          0.03  \n","ExtraTreeClassifier                  0.02  \n","SVC                                  0.05  \n","DecisionTreeClassifier               0.02  \n","ExtraTreesClassifier                 0.16  \n","NuSVC                                0.05  \n","BernoulliNB                          0.02  \n","DummyClassifier                      0.01  \n","KNeighborsClassifier                 0.02  \n","RandomForestClassifier               0.27  \n","LGBMClassifier                       0.14  \n","QuadraticDiscriminantAnalysis        0.03  \n","LabelSpreading                       0.04  \n","LabelPropagation                     0.03  \n","GaussianNB                           0.02  \n","BaggingClassifier                    0.08  \n","CalibratedClassifierCV               0.20  \n","NearestCentroid                      0.02  \n","XGBClassifier                        0.17  \n","SGDClassifier                        0.03  \n","AdaBoostClassifier                   0.16  \n","LinearDiscriminantAnalysis           0.08  \n","LinearSVC                            0.11  \n","RidgeClassifierCV                    0.07  \n","RidgeClassifier                      0.02  \n","LogisticRegression                   0.05  \n","Perceptron                           0.02  "],"text/html":["\n","  <div id=\"df-87c23c79-3a2c-4676-b65e-2e0629b16fa7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Accuracy</th>\n","      <th>Balanced Accuracy</th>\n","      <th>ROC AUC</th>\n","      <th>F1 Score</th>\n","      <th>Time Taken</th>\n","    </tr>\n","    <tr>\n","      <th>Model</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassiveAggressiveClassifier</th>\n","      <td>0.64</td>\n","      <td>0.64</td>\n","      <td>0.64</td>\n","      <td>0.64</td>\n","      <td>0.03</td>\n","    </tr>\n","    <tr>\n","      <th>ExtraTreeClassifier</th>\n","      <td>0.61</td>\n","      <td>0.62</td>\n","      <td>0.62</td>\n","      <td>0.61</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>SVC</th>\n","      <td>0.60</td>\n","      <td>0.60</td>\n","      <td>0.60</td>\n","      <td>0.60</td>\n","      <td>0.05</td>\n","    </tr>\n","    <tr>\n","      <th>DecisionTreeClassifier</th>\n","      <td>0.59</td>\n","      <td>0.59</td>\n","      <td>0.59</td>\n","      <td>0.59</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>ExtraTreesClassifier</th>\n","      <td>0.57</td>\n","      <td>0.58</td>\n","      <td>0.58</td>\n","      <td>0.58</td>\n","      <td>0.16</td>\n","    </tr>\n","    <tr>\n","      <th>NuSVC</th>\n","      <td>0.57</td>\n","      <td>0.58</td>\n","      <td>0.58</td>\n","      <td>0.58</td>\n","      <td>0.05</td>\n","    </tr>\n","    <tr>\n","      <th>BernoulliNB</th>\n","      <td>0.57</td>\n","      <td>0.57</td>\n","      <td>0.57</td>\n","      <td>0.57</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>DummyClassifier</th>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.01</td>\n","    </tr>\n","    <tr>\n","      <th>KNeighborsClassifier</th>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.56</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>RandomForestClassifier</th>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.27</td>\n","    </tr>\n","    <tr>\n","      <th>LGBMClassifier</th>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.14</td>\n","    </tr>\n","    <tr>\n","      <th>QuadraticDiscriminantAnalysis</th>\n","      <td>0.54</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.51</td>\n","      <td>0.03</td>\n","    </tr>\n","    <tr>\n","      <th>LabelSpreading</th>\n","      <td>0.54</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.53</td>\n","      <td>0.04</td>\n","    </tr>\n","    <tr>\n","      <th>LabelPropagation</th>\n","      <td>0.54</td>\n","      <td>0.55</td>\n","      <td>0.55</td>\n","      <td>0.53</td>\n","      <td>0.03</td>\n","    </tr>\n","    <tr>\n","      <th>GaussianNB</th>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.52</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>BaggingClassifier</th>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.52</td>\n","      <td>0.08</td>\n","    </tr>\n","    <tr>\n","      <th>CalibratedClassifierCV</th>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.53</td>\n","      <td>0.20</td>\n","    </tr>\n","    <tr>\n","      <th>NearestCentroid</th>\n","      <td>0.53</td>\n","      <td>0.52</td>\n","      <td>0.52</td>\n","      <td>0.53</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>XGBClassifier</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.17</td>\n","    </tr>\n","    <tr>\n","      <th>SGDClassifier</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.03</td>\n","    </tr>\n","    <tr>\n","      <th>AdaBoostClassifier</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.16</td>\n","    </tr>\n","    <tr>\n","      <th>LinearDiscriminantAnalysis</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.08</td>\n","    </tr>\n","    <tr>\n","      <th>LinearSVC</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.11</td>\n","    </tr>\n","    <tr>\n","      <th>RidgeClassifierCV</th>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.51</td>\n","      <td>0.07</td>\n","    </tr>\n","    <tr>\n","      <th>RidgeClassifier</th>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>LogisticRegression</th>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.49</td>\n","      <td>0.05</td>\n","    </tr>\n","    <tr>\n","      <th>Perceptron</th>\n","      <td>0.44</td>\n","      <td>0.43</td>\n","      <td>0.43</td>\n","      <td>0.43</td>\n","      <td>0.02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87c23c79-3a2c-4676-b65e-2e0629b16fa7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-87c23c79-3a2c-4676-b65e-2e0629b16fa7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-87c23c79-3a2c-4676-b65e-2e0629b16fa7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["from lazypredict.Supervised import LazyClassifier\n","clf = LazyClassifier(verbose=0,ignore_warnings=True)\n","models,predictions = clf.fit(X_train, X_test, y_train, y_test)\n","model_dictionary = clf.provide_models(X_train,X_test,y_train,y_test)\n","models"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5546,"status":"ok","timestamp":1655780366509,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"},"user_tz":240},"id":"KUY8Q1569SYi","outputId":"fd366c48-3c02-4bc5-84bf-088008d4e865"},"outputs":[{"output_type":"stream","name":"stdout","text":["AdaBoostClassifier 50\n","BaggingClassifier 45\n","BernoulliNB 64\n","CalibratedClassifierCV 52\n","DecisionTreeClassifier 55\n","DummyClassifier 52\n","ExtraTreeClassifier 52\n","ExtraTreesClassifier 57\n","GaussianNB 40\n","KNeighborsClassifier 52\n","LabelPropagation 38\n","LabelSpreading 38\n","LinearDiscriminantAnalysis 50\n","LinearSVC 52\n","LogisticRegression 50\n","NearestCentroid 55\n","NuSVC 57\n","PassiveAggressiveClassifier 60\n","Perceptron 57\n","QuadraticDiscriminantAnalysis 31\n","RandomForestClassifier 52\n","RidgeClassifier 48\n","RidgeClassifierCV 55\n","SGDClassifier 50\n","SVC 57\n","XGBClassifier 48\n","LGBMClassifier 55\n"]}],"source":["from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import classification_report\n","#predictions_summary=pd.DataFrame(X_test)\n","for key, model in model_dictionary.items():\n","  \n","  model.fit(X_train, y_train)\n","  y_pred = model.predict(X_test)\n","  print(key + \" \"+str(round(recall_score(y_test, y_pred)*100)))\n"]},{"cell_type":"code","source":["model=model\n","predictions=model_dictionary['BernoulliNB'].predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')\n","print(classification_report(y_test, predictions))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"Yu9cc21CsnMf","executionInfo":{"status":"ok","timestamp":1655780282703,"user_tz":240,"elapsed":387,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"792733e6-084b-4cbd-d19a-5e092c85b67d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.56      0.50      0.53        38\n","           1       0.59      0.64      0.61        42\n","\n","    accuracy                           0.57        80\n","   macro avg       0.57      0.57      0.57        80\n","weighted avg       0.57      0.57      0.57        80\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')\n","print(classification_report(y_test, predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"IY6lPXzLsxoe","executionInfo":{"status":"ok","timestamp":1655780309808,"user_tz":240,"elapsed":392,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"f56d8ff3-7c27-4166-a07d-632148c198af"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.56      0.50      0.53        38\n","           1       0.59      0.64      0.61        42\n","\n","    accuracy                           0.57        80\n","   macro avg       0.57      0.57      0.57        80\n","weighted avg       0.57      0.57      0.57        80\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":11,"metadata":{"id":"RyxvoPVh9K_3","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1655780316296,"user_tz":240,"elapsed":244,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"1607266a-ba6c-49e8-f8d1-cafea81211fb"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.57      0.63      0.60        38\n","           1       0.63      0.57      0.60        42\n","\n","    accuracy                           0.60        80\n","   macro avg       0.60      0.60      0.60        80\n","weighted avg       0.60      0.60      0.60        80\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["predictions=model_dictionary['SVC'].predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')\n","print(classification_report(y_test, predictions))"]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from sklearn.compose import make_column_selector\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from xgboost import XGBClassifier\n","\n","# fit model no training data\n","#model = XGBClassifier()\n","#model.fit(X_train, y_train)\n","\n","from sklearn.preprocessing import OrdinalEncoder\n","import numpy as np\n","\n","ordinal_encoder = make_column_transformer(\n","    (\n","        OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=np.nan),\n","        make_column_selector(dtype_include=\"category\"),\n","    ),\n","    remainder=\"passthrough\",\n",")\n","\n","model = make_pipeline(\n","    ordinal_encoder, XGBClassifier(random_state=45,\n","colsample_bylevel=0.3,\n","colsample_bytree=0.4,\n","gamma=0.01,\n","learning_rate=.003,\n","max_depth=1,\n","n_estimators=400,\n","subsample=0.8999999999999999)\n",")\n","\n","model.fit(X_train, y_train)\n","\n","predictions=model.predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"T7AsUaeADGW3","executionInfo":{"status":"error","timestamp":1655780372639,"user_tz":240,"elapsed":92,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"b9e97b1f-aca7-4d95-ea7b-1e0dde58cad6"},"execution_count":16,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-15c64a90228c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m ordinal_encoder = make_column_transformer(\n\u001b[1;32m     18\u001b[0m     (\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mOrdinalEncoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle_unknown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"use_encoded_value\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munknown_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0mmake_column_selector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype_include\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"category\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     ),\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m                           FutureWarning)\n\u001b[1;32m     72\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'handle_unknown'"]}]},{"cell_type":"code","source":["import pickle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","with open('/content/drive/My Drive/xgb_tuned_may15_allids_scaleposweightpoint7.pkl', 'wb') as f:\n","  pickle.dump(model, f)\n","\n","#with open('autosklearn.pkl', 'rb') as f:\n","#    loaded_classifier = pickle.load(f)\n","\n","#pickletest = loaded_classifier.predict(X_test)\n","#pickletest\n","#!cat /content/drive/My\\ Drive/foo.txt"],"metadata":{"id":"2XrX7sM39aGC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","from google.colab import drive\n","drive.mount('/content/drive')\n","with open('/content/drive/My Drive/xgb_tuned_may15_allids_scaleposweightpoint7.pkl', 'rb') as f:\n","    loaded_classifier = pickle.load(f)\n","\n","pickletest = loaded_classifier.predict(X_test)\n","pickletest\n","#!cat /content/drive/My\\ Drive/foo.txt"],"metadata":{"id":"Sd-zVtiiDQ0_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_grid.best_params_"],"metadata":{"id":"3KwzaP7G8KDa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","predictions=model.predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')"],"metadata":{"id":"2TYQ8GoW3B_u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictions=model.predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')"],"metadata":{"id":"vYuVA6B-GxXZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","\n","from sklearn.model_selection import StratifiedKFold\n","# Evaluate the model with the use of cv:\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=7)  #, shuffle=True with or without shuffle??\n","scores = cross_val_score(model, X_train, y_train, cv=cv, scoring = 'roc_auc')\n","print(\"roc_auc = %f (%f)\" % (scores.mean(), scores.std()))"],"metadata":{"id":"ukdEfWiyJrIR"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K1fJqQSzwUL5"},"outputs":[],"source":["#!pip install auto-sklearn\n","import autosklearn.classification\n","cls = autosklearn.classification.AutoSklearnClassifier(time_left_for_this_task=60)\n","cls.fit(X_train, y_train)\n","predictions = cls.predict(X_test)\n","# Precision of class 1\n","from sklearn.metrics import precision_score\n","precision_score(y_test, predictions, average=None)[1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hWfWXbma5cqg"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","with open('/content/drive/My Drive/autosklearn.pkl', 'wb') as f:\n","  pickle.dump(cls, f)\n","\n","with open('autosklearn.pkl', 'rb') as f:\n","    loaded_classifier = pickle.load(f)\n","\n","pickletest = loaded_classifier.predict(X_test)\n","pickletest\n","#!cat /content/drive/My\\ Drive/foo.txt"]},{"cell_type":"markdown","metadata":{"id":"5tz1i4HWwzNR"},"source":["\n","# Add models to dictionary\n","\n","# Loop through model dictionary and evaluate it on a custom metric (accuracy of class=1)\n","\n","# Load non-test data"]},{"cell_type":"markdown","source":["XGB gridsearch the variable"],"metadata":{"id":"FjDKFtMQD8_x"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from sklearn.compose import make_column_selector\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from xgboost import XGBClassifier\n","\n","# fit model no training data\n","#model = XGBClassifier()\n","#model.fit(X_train, y_train)\n","\n","from sklearn.preprocessing import OrdinalEncoder\n","import numpy as np\n","\n","ordinal_encoder = make_column_transformer(\n","    (\n","        OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=np.nan),\n","        make_column_selector(dtype_include=\"category\"),\n","    ),\n","    remainder=\"passthrough\",\n",")\n","\n","scale_pos_weight_setting=.9\n","model = make_pipeline(\n","    ordinal_encoder, XGBClassifier(random_state=45,\n","scale_pos_weight=scale_pos_weight_setting)\n",")\n","\n","model.fit(X_train, y_train)\n","\n","predictions=model.predict(X_test)\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, predictions)\n","f = sns.heatmap(cm, annot=True, fmt='d')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"KdtbeYSKD_Cv","executionInfo":{"status":"error","timestamp":1655780383061,"user_tz":240,"elapsed":100,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"7ce8ab2b-27e5-436f-da57-069d44c04c99"},"execution_count":17,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-c52b8a9946e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m ordinal_encoder = make_column_transformer(\n\u001b[1;32m     18\u001b[0m     (\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mOrdinalEncoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle_unknown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"use_encoded_value\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munknown_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0mmake_column_selector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype_include\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"category\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     ),\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m                           FutureWarning)\n\u001b[1;32m     72\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'handle_unknown'"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from sklearn.compose import make_column_selector\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from xgboost import XGBClassifier\n","# grid search class weights with svm for imbalance classification\n","from numpy import mean\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RepeatedStratifiedKFold\n","from sklearn.svm import SVC\n","\n","# define model\n","model = SVC(gamma='scale')\n","\n","\n","\n","\n","from sklearn.preprocessing import OrdinalEncoder\n","import numpy as np\n","\n","\n","print(model)\n","\n","\n","# define grid\n","balance = [{0:100,1:1}, {0:10,1:1}, {0:1,1:1}, {0:1,1:10}, {0:1,1:100}]\n","param_grid = dict(svc__class_weight=balance)\n","# define evaluation procedure\n","cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n","# define grid search\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=cv, scoring='roc_auc')\n","# execute the grid search\n","grid_result = grid.fit(X_train, y_train)\n","# report the best configuration\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","# report all configurations\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":818},"id":"PPxIx3PLnmMz","executionInfo":{"status":"error","timestamp":1655780389085,"user_tz":240,"elapsed":2970,"user":{"displayName":"Zach Blume","userId":"14336379750034701711"}},"outputId":"dc7f9b54-1f81-4560-e55e-329e002ca3f4"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["SVC()\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31m_RemoteTraceback\u001b[0m                          Traceback (most recent call last)","\u001b[0;31m_RemoteTraceback\u001b[0m: \n\"\"\"\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py\", line 431, in _process_worker\n    r = call_item()\n  File \"/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py\", line 285, in __call__\n    return self.fn(*self.args, **self.kwargs)\n  File \"/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\", line 595, in __call__\n    return self.func(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\", line 263, in __call__\n    for func, args, kwargs in self.items]\n  File \"/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\", line 263, in <listcomp>\n    for func, args, kwargs in self.items]\n  File \"/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\", line 520, in _fit_and_score\n    estimator = estimator.set_params(**cloned_parameters)\n  File \"/usr/local/lib/python3.7/dist-packages/sklearn/base.py\", line 252, in set_params\n    (key, self))\nValueError: Invalid parameter svc for estimator SVC(). Check the list of available parameters with `estimator.get_params().keys()`.\n\"\"\"","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-bf7dbfadab1f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'roc_auc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m# execute the grid search\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;31m# report the best configuration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Best: %f using %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mgrid_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m                           FutureWarning)\n\u001b[1;32m     72\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    734\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    735\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 736\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    738\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1188\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    713\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    714\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 715\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    716\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    717\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1052\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1054\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1055\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1056\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    931\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 933\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    934\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    935\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    433\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mCancelledError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mFINISHED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 435\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    436\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36m__get_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    382\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid parameter svc for estimator SVC(). Check the list of available parameters with `estimator.get_params().keys()`."]}]}],"metadata":{"accelerator":"TPU","colab":{"machine_shape":"hm","name":"Final Model Testing.ipnyb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO/xDFl8z3uIu0XjMGf9L4f"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}